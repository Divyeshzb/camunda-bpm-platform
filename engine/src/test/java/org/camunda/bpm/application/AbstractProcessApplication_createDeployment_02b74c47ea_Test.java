// Test generated by RoostGPT for test camunda-engine-unit using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.application;

import org.camunda.bpm.engine.repository.DeploymentBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

import static org.mockito.Mockito.times;

@SpringBootTest
public class AbstractProcessApplication_createDeployment_02b74c47ea_Test {

    private AbstractProcessApplication abstractProcessApplication;
    private DeploymentBuilder deploymentBuilder;

    @BeforeEach
    public void setUp() {
        abstractProcessApplication = Mockito.mock(AbstractProcessApplication.class);
        deploymentBuilder = Mockito.mock(DeploymentBuilder.class);
    }

    @Test
    public void testCreateDeployment_Success() {
        String processArchiveName = "TestProcessArchive";

        Mockito.doNothing().when(abstractProcessApplication).createDeployment(processArchiveName, deploymentBuilder);

        abstractProcessApplication.createDeployment(processArchiveName, deploymentBuilder);

        Mockito.verify(abstractProcessApplication, times(1)).createDeployment(processArchiveName, deploymentBuilder);
    }

    @Test
    public void testCreateDeployment_EmptyProcessArchiveName() {
        String processArchiveName = "";

        Mockito.doNothing().when(abstractProcessApplication).createDeployment(processArchiveName, deploymentBuilder);

        abstractProcessApplication.createDeployment(processArchiveName, deploymentBuilder);

        Mockito.verify(abstractProcessApplication, times(1)).createDeployment(processArchiveName, deploymentBuilder);
    }

    @Test
    public void testCreateDeployment_NullProcessArchiveName() {
        String processArchiveName = null;

        Mockito.doNothing().when(abstractProcessApplication).createDeployment(processArchiveName, deploymentBuilder);

        abstractProcessApplication.createDeployment(processArchiveName, deploymentBuilder);

        Mockito.verify(abstractProcessApplication, times(1)).createDeployment(processArchiveName, deploymentBuilder);
    }
}
