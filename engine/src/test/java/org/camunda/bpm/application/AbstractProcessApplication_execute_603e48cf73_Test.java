// Test generated by RoostGPT for test camunda-engine-unit using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.application;

import org.camunda.bpm.engine.impl.util.ClassLoaderUtil;
import org.camunda.bpm.application.impl.ProcessApplicationLogger;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;

import java.util.concurrent.Callable;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class AbstractProcessApplication_execute_603e48cf73_Test {

    @Mock
    private Callable<String> mockCallable;

    @Mock
    private ClassLoader mockClassLoader;

    private AbstractProcessApplication<String> abstractProcessApplication;

    @Before
    public void setUp() {
        abstractProcessApplication = new AbstractProcessApplication<String>() {
            @Override
            public ClassLoader getProcessApplicationClassloader() {
                return mockClassLoader;
            }
        };
    }

    @Test
    public void testExecuteSuccess() throws Exception {
        String expected = "Success";
        when(mockCallable.call()).thenReturn(expected);
        String result = abstractProcessApplication.execute(mockCallable);
        assertEquals(expected, result);
    }

    @Test(expected = ProcessApplicationExecutionException.class)
    public void testExecuteException() throws Exception {
        doThrow(new Exception()).when(mockCallable).call();
        abstractProcessApplication.execute(mockCallable);
    }

    @Test
    public void testExecuteClassLoaderSwitch() throws Exception {
        when(mockCallable.call()).thenAnswer((Answer<String>) invocation -> {
            assertEquals(mockClassLoader, ClassLoaderUtil.getContextClassloader());
            return "Success";
        });
        abstractProcessApplication.execute(mockCallable);
        assertEquals(Thread.currentThread().getContextClassLoader(), ClassLoaderUtil.getContextClassloader());
    }
}
