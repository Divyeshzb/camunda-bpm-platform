// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionTableResult;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class DefaultDmnEngine_evaluateDecisionTable_f8b7e0418f_Test {

    private DefaultDmnEngine defaultDmnEngine;
    private DmnDecision mockDecision;
    private VariableContext mockVariableContext;

    @BeforeEach
    public void setUp() {
        defaultDmnEngine = new DefaultDmnEngine();
        mockDecision = mock(DmnDecision.class);
        mockVariableContext = mock(VariableContext.class);
    }

    @Test
    public void testEvaluateDecisionTable_Success() {
        when(mockDecision.isDecisionTable()).thenReturn(true);
        DmnDecisionTableResult result = defaultDmnEngine.evaluateDecisionTable(mockDecision, mockVariableContext);
        assertEquals(result, DmnDecisionTableResultImpl.wrap(mockDecision.evaluateDecision(mockDecision, mockVariableContext)));
    }

    @Test
    public void testEvaluateDecisionTable_Failure() {
        when(mockDecision.isDecisionTable()).thenReturn(false);
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            defaultDmnEngine.evaluateDecisionTable(mockDecision, mockVariableContext);
        });
        assertEquals("Decision is not a decision table.", exception.getMessage());
    }
}
