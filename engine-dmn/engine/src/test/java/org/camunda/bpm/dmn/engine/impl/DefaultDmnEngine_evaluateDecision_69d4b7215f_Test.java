// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionResult;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecision_69d4b7215f_Test {

    private DefaultDmnEngine defaultDmnEngine;

    @Mock
    private DmnDecision decision;
    @Mock
    private VariableContext variableContext;
    @Mock
    private DmnDecisionResult decisionResult;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        defaultDmnEngine = new DefaultDmnEngine();
    }

    @Test
    public void testEvaluateDecision_withValidDecisionAndVariableContext() {
        when(decision instanceof DmnDecisionImpl).thenReturn(true);
        when(defaultDmnEngine.evaluateDecision(decision, variableContext)).thenReturn(decisionResult);

        DmnDecisionResult result = defaultDmnEngine.evaluateDecision(decision, variableContext);

        assertEquals(decisionResult, result);
    }

    @Test
    public void testEvaluateDecision_withInvalidDecisionType() {
        when(decision instanceof DmnDecisionImpl).thenReturn(false);

        try {
            defaultDmnEngine.evaluateDecision(decision, variableContext);
            fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("Decision type not supported", e.getMessage());
        }
    }
}
