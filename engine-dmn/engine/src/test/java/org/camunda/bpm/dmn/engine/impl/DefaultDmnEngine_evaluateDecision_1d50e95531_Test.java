// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import org.camunda.bpm.dmn.engine.DmnDecisionResult;
import org.camunda.bpm.engine.variable.Variables;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecision_1d50e95531_Test {

    @InjectMocks
    private DefaultDmnEngine defaultDmnEngine;

    @Mock
    private DmnDecisionResult dmnDecisionResult;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testEvaluateDecision_success() {
        String decisionKey = "testDecisionKey";
        InputStream inputStream = mock(InputStream.class);
        Map<String, Object> variables = new HashMap<>();
        variables.put("testKey", "testValue");

        when(defaultDmnEngine.evaluateDecision(anyString(), any(InputStream.class), any(VariableContext.class))).thenReturn(dmnDecisionResult);

        DmnDecisionResult result = defaultDmnEngine.evaluateDecision(decisionKey, inputStream, variables);
        assertEquals(dmnDecisionResult, result);
    }

    @Test
    public void testEvaluateDecision_nullVariables() {
        String decisionKey = "testDecisionKey";
        InputStream inputStream = mock(InputStream.class);

        assertThrows(IllegalArgumentException.class, () -> {
            defaultDmnEngine.evaluateDecision(decisionKey, inputStream, null);
        });
    }
}
