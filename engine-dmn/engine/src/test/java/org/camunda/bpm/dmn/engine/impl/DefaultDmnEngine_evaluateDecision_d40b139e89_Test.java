// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionResult;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.Before;
import org.junit.Test;

public class DefaultDmnEngine_evaluateDecision_d40b139e89_Test {

    private DefaultDmnEngine defaultDmnEngine;
    private DmnModelInstance dmnModelInstance;
    private VariableContext variableContext;

    @Before
    public void setUp() {
        defaultDmnEngine = new DefaultDmnEngine();
        dmnModelInstance = mock(DmnModelInstance.class);
        variableContext = mock(VariableContext.class);
    }

    @Test
    public void testEvaluateDecision_Success() {
        String decisionKey = "testKey";
        DmnDecision dmnDecision = mock(DmnDecision.class);
        when(dmnDecision.getKey()).thenReturn(decisionKey);

        List<DmnDecision> decisions = new ArrayList<>();
        decisions.add(dmnDecision);

        DmnDecisionResult expectedResult = mock(DmnDecisionResult.class);
        when(defaultDmnEngine.evaluateDecision(dmnDecision, variableContext)).thenReturn(expectedResult);

        DmnDecisionResult actualResult = defaultDmnEngine.evaluateDecision(decisionKey, dmnModelInstance, variableContext);

        assertEquals(expectedResult, actualResult);
    }

    @Test
    public void testEvaluateDecision_DecisionKeyNotFound() {
        String decisionKey = "testKey";

        List<DmnDecision> decisions = new ArrayList<>();

        Exception exception = assertThrows(DecisionNotFoundException.class, () -> {
            defaultDmnEngine.evaluateDecision(decisionKey, dmnModelInstance, variableContext);
        });

        String expectedMessage = "Unable to find decision with key " + decisionKey;
        String actualMessage = exception.getMessage();

        assertEquals(expectedMessage, actualMessage);
    }
}
