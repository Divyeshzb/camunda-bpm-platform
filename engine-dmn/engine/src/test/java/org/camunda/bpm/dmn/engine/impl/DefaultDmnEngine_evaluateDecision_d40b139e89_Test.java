// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Arrays;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionResult;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.Before;
import org.junit.Test;

public class DefaultDmnEngine_evaluateDecision_d40b139e89_Test {

    private DefaultDmnEngine defaultDmnEngine;
    private DmnModelInstance dmnModelInstance;
    private VariableContext variableContext;
    private DmnDecision decision1;
    private DmnDecision decision2;

    @Before
    public void setUp() {
        defaultDmnEngine = new DefaultDmnEngine();
        dmnModelInstance = mock(DmnModelInstance.class);
        variableContext = mock(VariableContext.class);
        decision1 = mock(DmnDecision.class);
        decision2 = mock(DmnDecision.class);

        when(decision1.getKey()).thenReturn("decision1");
        when(decision2.getKey()).thenReturn("decision2");

        when(defaultDmnEngine.parseDecisions(dmnModelInstance)).thenReturn(Arrays.asList(decision1, decision2));
    }

    @Test
    public void testEvaluateDecision_ValidDecisionKey() {
        DmnDecisionResult result = mock(DmnDecisionResult.class);
        when(defaultDmnEngine.evaluateDecision(decision1, variableContext)).thenReturn(result);

        DmnDecisionResult actualResult = defaultDmnEngine.evaluateDecision("decision1", dmnModelInstance, variableContext);

        assertEquals(result, actualResult);
    }

    @Test(expected = DecisionNotFoundException.class)
    public void testEvaluateDecision_InvalidDecisionKey() {
        defaultDmnEngine.evaluateDecision("decision3", dmnModelInstance, variableContext);
    }
}
