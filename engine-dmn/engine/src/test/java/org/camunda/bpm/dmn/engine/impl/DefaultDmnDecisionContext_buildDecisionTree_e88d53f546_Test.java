// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

public class DefaultDmnDecisionContext_buildDecisionTree_e88d53f546_Test {

    @Mock
    DmnDecision decision1, decision2, decision3;

    private List<DmnDecision> requiredDecisions;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        requiredDecisions = new ArrayList<>();
    }

    @Test
    public void testBuildDecisionTree_decisionAlreadyInRequiredDecisions() {
        requiredDecisions.add(decision1);
        buildDecisionTree(decision1, requiredDecisions);
        assertEquals(1, requiredDecisions.size());
    }

    @Test
    public void testBuildDecisionTree_decisionNotInRequiredDecisions() {
        List<DmnDecision> emptyList = new ArrayList<>();
        when(decision1.getRequiredDecisions()).thenReturn(emptyList);
        buildDecisionTree(decision1, requiredDecisions);
        assertEquals(1, requiredDecisions.size());
        assertTrue(requiredDecisions.contains(decision1));
    }

    @Test
    public void testBuildDecisionTree_decisionWithRequiredDecisions() {
        List<DmnDecision> decisionList = new ArrayList<>();
        decisionList.add(decision2);
        decisionList.add(decision3);
        when(decision1.getRequiredDecisions()).thenReturn(decisionList);
        buildDecisionTree(decision1, requiredDecisions);
        assertEquals(3, requiredDecisions.size());
        assertTrue(requiredDecisions.contains(decision1));
        assertTrue(requiredDecisions.contains(decision2));
        assertTrue(requiredDecisions.contains(decision3));
    }

    protected void buildDecisionTree(DmnDecision decision, List<DmnDecision> requiredDecisions) {
        if (requiredDecisions.contains(decision)) {
            return;
        }

        for (DmnDecision dmnDecision : decision.getRequiredDecisions()) {
            buildDecisionTree(dmnDecision, requiredDecisions);
        }

        requiredDecisions.add(decision);
    }
}
