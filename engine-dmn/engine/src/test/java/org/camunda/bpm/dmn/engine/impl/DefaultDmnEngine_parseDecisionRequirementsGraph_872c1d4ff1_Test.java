// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.InputStream;

import org.camunda.bpm.dmn.engine.DmnDecisionRequirementsGraph;
import org.camunda.bpm.dmn.engine.impl.spi.transform.DmnTransformer;
import org.camunda.bpm.dmn.engine.impl.spi.transform.DmnTransform;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_parseDecisionRequirementsGraph_872c1d4ff1_Test {

    @Mock
    private DmnTransformer transformer;

    @Mock
    private DmnTransform transform;

    @Mock
    private InputStream inputStream;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testParseDecisionRequirementsGraph_Success() {
        DmnDecisionRequirementsGraph graph = mock(DmnDecisionRequirementsGraph.class);

        when(transformer.createTransform()).thenReturn(transform);
        when(transform.modelInstance(inputStream)).thenReturn(transform);
        when(transform.transformDecisionRequirementsGraph()).thenReturn(graph);

        DefaultDmnEngine engine = new DefaultDmnEngine(transformer);
        DmnDecisionRequirementsGraph result = engine.parseDecisionRequirementsGraph(inputStream);

        assertNotNull(result);
        assertEquals(graph, result);
    }

    @Test
    public void testParseDecisionRequirementsGraph_NullInputStream() {
        try {
            DefaultDmnEngine engine = new DefaultDmnEngine(transformer);
            engine.parseDecisionRequirementsGraph(null);
            fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("inputStream", e.getMessage());
        }
    }

    @Test
    public void testParseDecisionRequirementsGraph_TransformException() {
        when(transformer.createTransform()).thenReturn(transform);
        when(transform.modelInstance(inputStream)).thenThrow(new RuntimeException());

        try {
            DefaultDmnEngine engine = new DefaultDmnEngine(transformer);
            engine.parseDecisionRequirementsGraph(inputStream);
            fail("Expected a RuntimeException to be thrown");
        } catch (RuntimeException e) {
            // Expected
        }
    }
}
