// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.InputStream;

import org.camunda.bpm.dmn.engine.DmnDecisionRequirementsGraph;
import org.camunda.bpm.dmn.engine.impl.spi.transform.DmnTransformer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_parseDecisionRequirementsGraph_872c1d4ff1_Test {

    @InjectMocks
    private DefaultDmnEngine defaultDmnEngine = new DefaultDmnEngine();

    @Mock
    private DmnTransformer transformer;

    @Mock
    private InputStream inputStream;

    @Mock
    private DmnDecisionRequirementsGraph decisionRequirementsGraph;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testParseDecisionRequirementsGraph_Success() {
        when(transformer.createTransform().modelInstance(inputStream).transformDecisionRequirementsGraph()).thenReturn(decisionRequirementsGraph);

        DmnDecisionRequirementsGraph result = defaultDmnEngine.parseDecisionRequirementsGraph(inputStream);

        assertNotNull(result);
        assertEquals(decisionRequirementsGraph, result);
    }

    @Test
    public void testParseDecisionRequirementsGraph_NullInputStream() {
        assertThrows(IllegalArgumentException.class, () -> defaultDmnEngine.parseDecisionRequirementsGraph(null));
    }
}
