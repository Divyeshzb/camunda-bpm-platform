// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

import org.camunda.bpm.dmn.engine.DmnDecisionResult;
import org.camunda.bpm.engine.variable.Variables;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecision_b06674eed5_Test {

    @InjectMocks
    DefaultDmnEngine defaultDmnEngine;

    @Mock
    DmnModelInstance dmnModelInstance;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testEvaluateDecisionSuccess() {
        String decisionKey = "testKey";
        Map<String, Object> variables = new HashMap<>();
        variables.put("testVariable", "testValue");

        DmnDecisionResult mockResult = mock(DmnDecisionResult.class);
        when(defaultDmnEngine.evaluateDecision(eq(decisionKey), eq(dmnModelInstance), any())).thenReturn(mockResult);

        DmnDecisionResult result = defaultDmnEngine.evaluateDecision(decisionKey, dmnModelInstance, variables);

        verify(defaultDmnEngine, times(1)).evaluateDecision(decisionKey, dmnModelInstance, Variables.fromMap(variables).asVariableContext());
        assertEquals(mockResult, result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testEvaluateDecisionFailure() {
        String decisionKey = "testKey";
        Map<String, Object> variables = null;

        defaultDmnEngine.evaluateDecision(decisionKey, dmnModelInstance, variables);
    }
}
