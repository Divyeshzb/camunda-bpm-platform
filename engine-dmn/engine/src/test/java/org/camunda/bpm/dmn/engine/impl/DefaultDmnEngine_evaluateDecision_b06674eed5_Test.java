// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;

import org.camunda.bpm.dmn.engine.DmnDecisionResult;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecision_b06674eed5_Test {

    @InjectMocks
    private DefaultDmnEngine defaultDmnEngine;

    @Mock
    private DmnModelInstance dmnModelInstance;

    @Mock
    private DmnDecisionResult dmnDecisionResult;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testEvaluateDecision_Success() {
        String decisionKey = "decisionKey1";
        Map<String, Object> variables = new HashMap<>();
        variables.put("key1", "value1");
        variables.put("key2", "value2");

        VariableContext variableContext = Variables.fromMap(variables).asVariableContext();
        when(defaultDmnEngine.evaluateDecision(decisionKey, dmnModelInstance, variableContext)).thenReturn(dmnDecisionResult);

        DmnDecisionResult result = defaultDmnEngine.evaluateDecision(decisionKey, dmnModelInstance, variables);
        assertEquals(dmnDecisionResult, result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testEvaluateDecision_NullVariables() {
        String decisionKey = "decisionKey2";
        defaultDmnEngine.evaluateDecision(decisionKey, dmnModelInstance, null);
    }
}
