// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionTableResult;
import org.camunda.bpm.engine.variable.Variables;
import org.junit.Before;
import org.junit.Test;

public class DefaultDmnEngine_evaluateDecisionTable_864748667b_Test {

    private DefaultDmnEngine defaultDmnEngine;
    private DmnDecision mockDecision;

    @Before
    public void setUp() {
        defaultDmnEngine = new DefaultDmnEngine();
        mockDecision = mock(DmnDecision.class);
    }

    @Test
    public void testEvaluateDecisionTable_success() {
        Map<String, Object> variables = new HashMap<>();
        variables.put("key", "value");

        DmnDecisionTableResult expected = mock(DmnDecisionTableResult.class);
        when(mockDecision.evaluateDecisionTable(Variables.fromMap(variables).asVariableContext())).thenReturn(expected);

        DmnDecisionTableResult actual = defaultDmnEngine.evaluateDecisionTable(mockDecision, variables);

        assertNotNull(actual);
        assertEquals(expected, actual);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testEvaluateDecisionTable_decisionNull() {
        defaultDmnEngine.evaluateDecisionTable(null, new HashMap<>());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testEvaluateDecisionTable_variablesNull() {
        defaultDmnEngine.evaluateDecisionTable(mockDecision, null);
    }
}
