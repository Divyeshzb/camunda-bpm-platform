// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.impl.spi.transform.DmnTransformer;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_parseDecisions_5bc7b5e5b2_Test {

    @Mock
    private DmnTransformer transformer;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testParseDecisionsSuccess() {
        try {
            InputStream inputStream = mock(InputStream.class);
            List<DmnDecision> expectedDecisions = new ArrayList<>();

            when(transformer.createTransform().modelInstance(inputStream).transformDecisions()).thenReturn(expectedDecisions);

            List<DmnDecision> actualDecisions = new DefaultDmnEngine(transformer).parseDecisions(inputStream);

            assertEquals(expectedDecisions, actualDecisions);
        } catch (Exception e) {
            fail("Exception should not have been thrown.");
        }
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseDecisionsNullInputStream() {
        new DefaultDmnEngine(transformer).parseDecisions(null);
    }

    @Test(expected = RuntimeException.class)
    public void testParseDecisionsTransformException() {
        InputStream inputStream = mock(InputStream.class);
        when(transformer.createTransform().modelInstance(inputStream).transformDecisions()).thenThrow(new RuntimeException());

        new DefaultDmnEngine(transformer).parseDecisions(inputStream);
    }
}
