// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.impl.spi.transform.DmnTransformer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class DefaultDmnEngine_parseDecisions_5bc7b5e5b2_Test {

    private DmnTransformer transformer;
    private DefaultDmnEngine engine;

    @BeforeEach
    public void setup() {
        transformer = mock(DmnTransformer.class);
        engine = new DefaultDmnEngine(transformer);
    }

    @Test
    public void testParseDecisions_validStream() {
        InputStream inputStream = new ByteArrayInputStream("valid data".getBytes());
        List<DmnDecision> expectedDecisions = new ArrayList<>();
        expectedDecisions.add(mock(DmnDecision.class));

        when(transformer.createTransform().modelInstance(inputStream).transformDecisions()).thenReturn(expectedDecisions);

        List<DmnDecision> actualDecisions = engine.parseDecisions(inputStream);

        assertEquals(expectedDecisions, actualDecisions);
    }

    @Test
    public void testParseDecisions_nullStream() {
        assertThrows(IllegalArgumentException.class, () -> engine.parseDecisions(null));
    }
}
