// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.camunda.bpm.dmn.engine.impl.hitpolicy.HitPolicyEntry;
import org.camunda.bpm.dmn.engine.impl.DmnDecisionTableImpl;
import org.camunda.bpm.dmn.engine.DmnDecision;
import org.junit.Before;
import org.junit.Test;

public class DefaultDmnDecisionContext_isDecisionTableWithCollectOrRuleOrderHitPolicy_67ea206b65_Test {

    private DmnDecision evaluatedDecision;
    private DmnDecisionTableImpl decisionTable;

    @Before
    public void setUp() {
        evaluatedDecision = mock(DmnDecision.class);
        decisionTable = mock(DmnDecisionTableImpl.class);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_whenDecisionTableWithCollectHitPolicy() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(true);
        when(evaluatedDecision.getDecisionLogic()).thenReturn(decisionTable);
        when(decisionTable.getHitPolicyHandler().getHitPolicyEntry()).thenReturn(HitPolicyEntry.COLLECT_HIT_POLICY);

        boolean result = isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);
        assertTrue(result);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_whenDecisionTableWithRuleOrderHitPolicy() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(true);
        when(evaluatedDecision.getDecisionLogic()).thenReturn(decisionTable);
        when(decisionTable.getHitPolicyHandler().getHitPolicyEntry()).thenReturn(HitPolicyEntry.RULE_ORDER_HIT_POLICY);

        boolean result = isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);
        assertTrue(result);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_whenNotDecisionTable() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(false);

        boolean result = isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);
        assertFalse(result);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_whenDecisionTableWithoutCollectOrRuleOrderHitPolicy() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(true);
        when(evaluatedDecision.getDecisionLogic()).thenReturn(decisionTable);
        when(decisionTable.getHitPolicyHandler().getHitPolicyEntry()).thenReturn(HitPolicyEntry.OTHER_HIT_POLICY);

        boolean result = isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);
        assertFalse(result);
    }
}
