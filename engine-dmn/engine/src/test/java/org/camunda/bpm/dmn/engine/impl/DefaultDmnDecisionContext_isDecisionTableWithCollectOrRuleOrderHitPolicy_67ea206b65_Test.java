// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.impl.hitpolicy.HitPolicyEntry;
import org.camunda.bpm.dmn.engine.impl.DmnDecisionTableImpl;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import static org.mockito.Mockito.when;
import static org.junit.Assert.*;

@RunWith(MockitoJUnitRunner.class)
public class DefaultDmnDecisionContext_isDecisionTableWithCollectOrRuleOrderHitPolicy_67ea206b65_Test {

    @Mock
    DmnDecision evaluatedDecision;

    @Mock
    DmnDecisionTableImpl decisionTable;

    @Mock
    HitPolicyEntry hitPolicyEntry;

    @Before
    public void setUp() {
        when(evaluatedDecision.getDecisionLogic()).thenReturn(decisionTable);
        when(decisionTable.getHitPolicyHandler().getHitPolicyEntry()).thenReturn(hitPolicyEntry);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_WhenIsDecisionTable() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(true);
        when(hitPolicyEntry.equals(COLLECT_HIT_POLICY)).thenReturn(true);

        boolean result = isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);

        assertTrue(result);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_WhenNotDecisionTable() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(false);

        boolean result = isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);

        assertFalse(result);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_WhenNotCollectHitPolicy() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(true);
        when(hitPolicyEntry.equals(COLLECT_HIT_POLICY)).thenReturn(false);

        boolean result = isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);

        assertFalse(result);
    }
}
