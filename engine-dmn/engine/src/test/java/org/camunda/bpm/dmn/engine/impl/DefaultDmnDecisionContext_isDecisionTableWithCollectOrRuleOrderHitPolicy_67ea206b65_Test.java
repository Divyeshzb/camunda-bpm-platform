// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.impl.hitpolicy.HitPolicyEntry;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class DefaultDmnDecisionContext_isDecisionTableWithCollectOrRuleOrderHitPolicy_67ea206b65_Test {

    @Mock
    private DmnDecision evaluatedDecision;

    @Mock
    private DmnDecisionTableImpl decisionTable;

    @Mock
    private HitPolicyEntry hitPolicyEntry;

    @InjectMocks
    private DefaultDmnDecisionContext defaultDmnDecisionContext;

    @BeforeEach
    public void setup() {
        when(evaluatedDecision.getDecisionLogic()).thenReturn(decisionTable);
        when(decisionTable.getHitPolicyHandler()).thenReturn(hitPolicyEntry);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_CollectHitPolicy() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(true);
        when(hitPolicyEntry.getHitPolicyEntry()).thenReturn(DefaultDmnDecisionContext.COLLECT_HIT_POLICY);

        boolean result = defaultDmnDecisionContext.isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);

        assertTrue(result);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_RuleOrderHitPolicy() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(true);
        when(hitPolicyEntry.getHitPolicyEntry()).thenReturn(DefaultDmnDecisionContext.RULE_ORDER_HIT_POLICY);

        boolean result = defaultDmnDecisionContext.isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);

        assertTrue(result);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_NotDecisionTable() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(false);

        boolean result = defaultDmnDecisionContext.isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);

        assertFalse(result);
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_NotCollectOrRuleOrderHitPolicy() {
        when(evaluatedDecision.isDecisionTable()).thenReturn(true);
        when(hitPolicyEntry.getHitPolicyEntry()).thenReturn("OtherHitPolicy");

        boolean result = defaultDmnDecisionContext.isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision);

        assertFalse(result);
    }
}
