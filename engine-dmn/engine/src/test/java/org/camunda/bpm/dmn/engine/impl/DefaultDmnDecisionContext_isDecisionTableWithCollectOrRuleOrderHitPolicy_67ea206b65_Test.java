// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import org.camunda.bpm.dmn.engine.impl.hitpolicy.HitPolicyEntry;
import org.camunda.bpm.dmn.engine.impl.evaluation.DmnDecisionLogicEvaluationHandler;
import org.camunda.bpm.dmn.engine.impl.evaluation.DecisionTableEvaluationHandler;
import org.camunda.bpm.dmn.engine.impl.evaluation.DecisionLiteralExpressionEvaluationHandler;
import org.camunda.bpm.dmn.engine.impl.delegate.DmnDecisionEvaluationEventImpl;
import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionLogic;
import org.camunda.bpm.dmn.engine.DmnDecisionResult;
import org.camunda.bpm.dmn.engine.delegate.DmnDecisionEvaluationListener;
import org.camunda.bpm.dmn.engine.delegate.DmnDecisionLogicEvaluationEvent;
import org.camunda.bpm.engine.variable.VariableMap;
import org.camunda.bpm.engine.variable.Variables;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.camunda.bpm.model.dmn.HitPolicy;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

public class DefaultDmnDecisionContext_isDecisionTableWithCollectOrRuleOrderHitPolicy_67ea206b65_Test {

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_CollectHitPolicy() {
        DmnDecision evaluatedDecision = Mockito.mock(DmnDecision.class);
        Mockito.when(evaluatedDecision.isDecisionTable()).thenReturn(true);

        DmnDecisionTableImpl decisionTable = Mockito.mock(DmnDecisionTableImpl.class);
        Mockito.when(evaluatedDecision.getDecisionLogic()).thenReturn(decisionTable);

        HitPolicyEntry hitPolicyEntry = Mockito.mock(HitPolicyEntry.class);
        Mockito.when(decisionTable.getHitPolicyHandler()).thenReturn(hitPolicyEntry);
        Mockito.when(hitPolicyEntry.getHitPolicy()).thenReturn(HitPolicy.COLLECT);

        Assert.assertTrue(isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision));
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_RuleOrderHitPolicy() {
        DmnDecision evaluatedDecision = Mockito.mock(DmnDecision.class);
        Mockito.when(evaluatedDecision.isDecisionTable()).thenReturn(true);

        DmnDecisionTableImpl decisionTable = Mockito.mock(DmnDecisionTableImpl.class);
        Mockito.when(evaluatedDecision.getDecisionLogic()).thenReturn(decisionTable);

        HitPolicyEntry hitPolicyEntry = Mockito.mock(HitPolicyEntry.class);
        Mockito.when(decisionTable.getHitPolicyHandler()).thenReturn(hitPolicyEntry);
        Mockito.when(hitPolicyEntry.getHitPolicy()).thenReturn(HitPolicy.RULE_ORDER);

        Assert.assertTrue(isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision));
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_NotDecisionTable() {
        DmnDecision evaluatedDecision = Mockito.mock(DmnDecision.class);
        Mockito.when(evaluatedDecision.isDecisionTable()).thenReturn(false);

        Assert.assertFalse(isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision));
    }

    @Test
    public void testIsDecisionTableWithCollectOrRuleOrderHitPolicy_OtherHitPolicy() {
        DmnDecision evaluatedDecision = Mockito.mock(DmnDecision.class);
        Mockito.when(evaluatedDecision.isDecisionTable()).thenReturn(true);

        DmnDecisionTableImpl decisionTable = Mockito.mock(DmnDecisionTableImpl.class);
        Mockito.when(evaluatedDecision.getDecisionLogic()).thenReturn(decisionTable);

        HitPolicyEntry hitPolicyEntry = Mockito.mock(HitPolicyEntry.class);
        Mockito.when(decisionTable.getHitPolicyHandler()).thenReturn(hitPolicyEntry);
        Mockito.when(hitPolicyEntry.getHitPolicy()).thenReturn(HitPolicy.ANY);

        Assert.assertFalse(isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision));
    }
}
