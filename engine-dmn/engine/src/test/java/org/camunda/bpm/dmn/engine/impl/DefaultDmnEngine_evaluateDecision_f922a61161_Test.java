// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionResult;
import org.camunda.bpm.engine.variable.Variables;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecision_f922a61161_Test {

    @InjectMocks
    DefaultDmnEngine defaultDmnEngine;

    @Mock
    DmnDecision decision;

    @Mock
    DmnDecisionResult decisionResult;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testEvaluateDecision_success() {
        Map<String, Object> variables = new HashMap<>();
        variables.put("key", "value");

        when(defaultDmnEngine.evaluateDecision(decision, Variables.fromMap(variables).asVariableContext())).thenReturn(decisionResult);

        DmnDecisionResult result = defaultDmnEngine.evaluateDecision(decision, variables);

        assertEquals(decisionResult, result);
    }

    @Test
    public void testEvaluateDecision_failure() {
        Map<String, Object> variables = new HashMap<>();
        variables.put("key", "value");

        when(defaultDmnEngine.evaluateDecision(decision, Variables.fromMap(variables).asVariableContext())).thenThrow(new RuntimeException());

        assertThrows(RuntimeException.class, () -> {
            defaultDmnEngine.evaluateDecision(decision, variables);
        });
    }
}
