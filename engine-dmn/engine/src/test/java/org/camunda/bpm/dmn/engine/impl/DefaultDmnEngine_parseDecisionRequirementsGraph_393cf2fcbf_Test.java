// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.camunda.bpm.dmn.engine.DmnDecisionRequirementsGraph;
import org.camunda.bpm.dmn.engine.impl.spi.transform.DmnTransformer;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_parseDecisionRequirementsGraph_393cf2fcbf_Test {

    @InjectMocks
    DefaultDmnEngine defaultDmnEngine;

    @Mock
    DmnTransformer transformer;

    @Mock
    DmnModelInstance dmnModelInstance;

    @Mock
    DmnDecisionRequirementsGraph dmnDecisionRequirementsGraph;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testParseDecisionRequirementsGraph_Success() {
        when(transformer.createTransform().modelInstance(dmnModelInstance).transformDecisionRequirementsGraph()).thenReturn(dmnDecisionRequirementsGraph);
        DmnDecisionRequirementsGraph result = defaultDmnEngine.parseDecisionRequirementsGraph(dmnModelInstance);
        assertEquals(dmnDecisionRequirementsGraph, result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseDecisionRequirementsGraph_NullDmnModelInstance() {
        defaultDmnEngine.parseDecisionRequirementsGraph(null);
    }
}
