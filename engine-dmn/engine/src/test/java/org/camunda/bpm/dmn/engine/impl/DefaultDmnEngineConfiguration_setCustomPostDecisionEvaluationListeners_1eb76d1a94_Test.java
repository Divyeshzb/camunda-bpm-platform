// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import java.util.Arrays;
import java.util.List;
import org.camunda.bpm.dmn.engine.delegate.DmnDecisionEvaluationListener;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(SpringRunner.class)
@SpringBootTest
public class DefaultDmnEngineConfiguration_setCustomPostDecisionEvaluationListeners_1eb76d1a94_Test {
    
    @Test
    public void testSetCustomPostDecisionEvaluationListeners_Success() {
        // Mocking DmnDecisionEvaluationListener
        DmnDecisionEvaluationListener listener1 = Mockito.mock(DmnDecisionEvaluationListener.class);
        DmnDecisionEvaluationListener listener2 = Mockito.mock(DmnDecisionEvaluationListener.class);
        List<DmnDecisionEvaluationListener> listeners = Arrays.asList(listener1, listener2);

        DefaultDmnEngineConfiguration configuration = new DefaultDmnEngineConfiguration();
        configuration.setCustomPostDecisionEvaluationListeners(listeners);

        assertEquals(listeners, configuration.getCustomPostDecisionEvaluationListeners());
    }

    @Test
    public void testSetCustomPostDecisionEvaluationListeners_Null() {
        DefaultDmnEngineConfiguration configuration = new DefaultDmnEngineConfiguration();
        configuration.setCustomPostDecisionEvaluationListeners(null);

        assertNull(configuration.getCustomPostDecisionEvaluationListeners());
    }

    @Test
    public void testSetCustomPostDecisionEvaluationListeners_Empty() {
        DefaultDmnEngineConfiguration configuration = new DefaultDmnEngineConfiguration();
        configuration.setCustomPostDecisionEvaluationListeners(Arrays.asList());

        assertTrue(configuration.getCustomPostDecisionEvaluationListeners().isEmpty());
    }
}
