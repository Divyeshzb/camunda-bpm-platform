// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionResult;
import org.camunda.bpm.engine.variable.VariableMap;
import org.camunda.bpm.engine.variable.Variables;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.*;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

public class DefaultDmnDecisionContext_addResultToVariableContext_3d0a11a9a8_Test {

    @Mock
    private DmnDecisionResult evaluatedResult;
    @Mock
    private DmnDecision evaluatedDecision;

    private VariableMap variableMap;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        variableMap = Variables.createVariables();
    }

    @Test
    public void testAddResultToVariableContextWithEmptyResultList() {
        when(evaluatedResult.getResultList()).thenReturn(new ArrayList<>());

        addResultToVariableContext(evaluatedResult, variableMap, evaluatedDecision);

        assertEquals(0, variableMap.size());
    }

    @Test
    public void testAddResultToVariableContextWithSingleResultAndNonCollectPolicy() {
        Map<String, Object> singleResult = new HashMap<>();
        singleResult.put("key", "value");
        List<Map<String, Object>> resultList = new ArrayList<>();
        resultList.add(singleResult);
        when(evaluatedResult.getResultList()).thenReturn(resultList);
        when(evaluatedResult.getSingleResult()).thenReturn(singleResult);
        when(isDecisionTableWithCollectOrRuleOrderHitPolicy(evaluatedDecision)).thenReturn(false);

        addResultToVariableContext(evaluatedResult, variableMap, evaluatedDecision);

        assertEquals(1, variableMap.size());
        assertEquals("value", variableMap.getValue("key"));
    }

    @Test
    public void testAddResultToVariableContextWithMultipleResults() {
        Map<String, Object> result1 = new HashMap<>();
        result1.put("key1", "value1");
        Map<String, Object> result2 = new HashMap<>();
        result2.put("key2", "value2");
        List<Map<String, Object>> resultList = new ArrayList<>();
        resultList.add(result1);
        resultList.add(result2);
        when(evaluatedResult.getResultList()).thenReturn(resultList);
        when(evaluatedResult.collectEntries("key1")).thenReturn(Collections.singletonList("value1"));
        when(evaluatedResult.collectEntries("key2")).thenReturn(Collections.singletonList("value2"));

        addResultToVariableContext(evaluatedResult, variableMap, evaluatedDecision);

        assertEquals(2, variableMap.size());
        assertEquals(Collections.singletonList("value1"), variableMap.getValue("key1"));
        assertEquals(Collections.singletonList("value2"), variableMap.getValue("key2"));
    }
}
