// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionLogic;
import org.camunda.bpm.dmn.engine.impl.evaluation.DmnDecisionLogicEvaluationHandler;
import org.camunda.bpm.dmn.engine.impl.evaluation.DecisionLiteralExpressionEvaluationHandler;
import org.camunda.bpm.dmn.engine.impl.evaluation.DecisionTableEvaluationHandler;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
@SpringBootTest
public class DefaultDmnDecisionContext_getDecisionEvaluationHandler_8dde4cf6f5_Test {

    @InjectMocks
    DefaultDmnDecisionContext decisionContext;

    @Mock
    DmnDecision decision;

    @Mock
    DmnDecisionLogic decisionLogic;

    private Map<Class<? extends DmnDecisionLogic>, DmnDecisionLogicEvaluationHandler> evaluationHandlers;

    @Before
    public void setUp() {
        evaluationHandlers = new HashMap<>();
        evaluationHandlers.put(DecisionLiteralExpressionEvaluationHandler.class, new DecisionLiteralExpressionEvaluationHandler());
        evaluationHandlers.put(DecisionTableEvaluationHandler.class, new DecisionTableEvaluationHandler());
    }

    @Test
    public void testGetDecisionEvaluationHandler_Success() {
        when(decision.getDecisionLogic()).thenReturn(decisionLogic);
        when(decisionLogic.getClass()).thenReturn(DecisionLiteralExpressionEvaluationHandler.class);

        DmnDecisionLogicEvaluationHandler result = decisionContext.getDecisionEvaluationHandler(decision);

        assertEquals(evaluationHandlers.get(DecisionLiteralExpressionEvaluationHandler.class), result);
    }

    @Test(expected = DmnDecisionLogicEvaluationHandlerException.class)
    public void testGetDecisionEvaluationHandler_Failure() {
        when(decision.getDecisionLogic()).thenReturn(decisionLogic);
        when(decisionLogic.getClass()).thenReturn(UnsupportedDecisionLogic.class);

        decisionContext.getDecisionEvaluationHandler(decision);

        fail("Expected an DmnDecisionLogicEvaluationHandlerException to be thrown");
    }
}
