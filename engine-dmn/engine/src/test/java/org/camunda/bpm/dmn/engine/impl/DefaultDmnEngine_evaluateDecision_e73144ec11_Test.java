// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.InputStream;
import java.util.Arrays;
import java.util.List;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionResult;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecision_e73144ec11_Test {

    @InjectMocks
    private DefaultDmnEngine defaultDmnEngine;

    @Mock
    private DmnDecision dmnDecision;

    @Mock
    private VariableContext variableContext;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testEvaluateDecision_Success() {
        String decisionKey = "decisionKey";
        InputStream inputStream = mock(InputStream.class);
        when(dmnDecision.getKey()).thenReturn(decisionKey);
        List<DmnDecision> decisions = Arrays.asList(dmnDecision);
        when(defaultDmnEngine.parseDecisions(inputStream)).thenReturn(decisions);
        DmnDecisionResult decisionResult = mock(DmnDecisionResult.class);
        when(defaultDmnEngine.evaluateDecision(dmnDecision, variableContext)).thenReturn(decisionResult);

        DmnDecisionResult result = defaultDmnEngine.evaluateDecision(decisionKey, inputStream, variableContext);

        assertEquals(decisionResult, result);
    }

    @Test
    public void testEvaluateDecision_Failure() {
        String decisionKey = "decisionKey";
        InputStream inputStream = mock(InputStream.class);
        when(dmnDecision.getKey()).thenReturn("wrongKey");
        List<DmnDecision> decisions = Arrays.asList(dmnDecision);
        when(defaultDmnEngine.parseDecisions(inputStream)).thenReturn(decisions);

        Exception exception = assertThrows(RuntimeException.class, () -> {
            defaultDmnEngine.evaluateDecision(decisionKey, inputStream, variableContext);
        });

        String expectedMessage = "Unable to find decision with key " + decisionKey;
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}
