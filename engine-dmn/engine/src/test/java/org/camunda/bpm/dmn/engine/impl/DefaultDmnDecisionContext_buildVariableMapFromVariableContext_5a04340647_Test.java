// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import org.camunda.bpm.engine.variable.Variables;
import org.camunda.bpm.engine.variable.VariableMap;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

public class DefaultDmnDecisionContext_buildVariableMapFromVariableContext_5a04340647_Test {

    @Test
    public void testBuildVariableMapFromVariableContext() {
        // Mock the VariableContext
        VariableContext variableContext = Mockito.mock(VariableContext.class);
        Set<String> mockSet = new HashSet<>();
        mockSet.add("testVariable");

        when(variableContext.keySet()).thenReturn(mockSet);
        when(variableContext.resolve("testVariable")).thenReturn("testValue");

        // Call the method to test
        VariableMap result = buildVariableMapFromVariableContext(variableContext);

        // Assertions
        assertNotNull(result);
        assertEquals("testValue", result.getValue("testVariable"));
    }

    @Test
    public void testBuildVariableMapFromVariableContext_WithNoVariables() {
        // Mock the VariableContext
        VariableContext variableContext = Mockito.mock(VariableContext.class);
        Set<String> mockSet = new HashSet<>();

        when(variableContext.keySet()).thenReturn(mockSet);

        // Call the method to test
        VariableMap result = buildVariableMapFromVariableContext(variableContext);

        // Assertions
        assertNotNull(result);
        assertEquals(0, result.size());
    }

    protected VariableMap buildVariableMapFromVariableContext(VariableContext variableContext) {
        VariableMap variableMap = Variables.createVariables();

        Set<String> variables = variableContext.keySet();
        for (String variable : variables) {
            variableMap.put(variable, variableContext.resolve(variable));
        }

        return variableMap;
    }
}
