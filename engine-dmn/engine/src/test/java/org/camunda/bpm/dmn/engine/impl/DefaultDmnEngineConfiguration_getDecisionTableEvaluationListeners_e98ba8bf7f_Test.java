// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import java.util.List;
import org.camunda.bpm.dmn.engine.delegate.DmnDecisionTableEvaluationListener;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class DefaultDmnEngineConfiguration_getDecisionTableEvaluationListeners_e98ba8bf7f_Test {

    @InjectMocks
    DefaultDmnEngineConfiguration defaultDmnEngineConfiguration;

    @Mock
    List<DmnDecisionTableEvaluationListener> decisionTableEvaluationListeners;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetDecisionTableEvaluationListeners_Success() {
        List<DmnDecisionTableEvaluationListener> expectedListeners = mock(List.class);
        when(decisionTableEvaluationListeners.size()).thenReturn(3);
        when(defaultDmnEngineConfiguration.getDecisionTableEvaluationListeners()).thenReturn(expectedListeners);

        List<DmnDecisionTableEvaluationListener> actualListeners = defaultDmnEngineConfiguration.getDecisionTableEvaluationListeners();

        assertEquals(expectedListeners, actualListeners);
        verify(decisionTableEvaluationListeners, times(1)).size();
    }

    @Test
    public void testGetDecisionTableEvaluationListeners_EmptyList() {
        List<DmnDecisionTableEvaluationListener> expectedListeners = mock(List.class);
        when(decisionTableEvaluationListeners.size()).thenReturn(0);
        when(defaultDmnEngineConfiguration.getDecisionTableEvaluationListeners()).thenReturn(expectedListeners);

        List<DmnDecisionTableEvaluationListener> actualListeners = defaultDmnEngineConfiguration.getDecisionTableEvaluationListeners();

        assertEquals(expectedListeners, actualListeners);
        verify(decisionTableEvaluationListeners, times(1)).size();
    }
}
