// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnEngine;
import org.camunda.bpm.dmn.engine.impl.spi.transform.DmnTransformer;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_parseDecisions_bd368c489b_Test {

    @InjectMocks
    private DmnEngine dmnEngine;

    @Mock
    private DmnTransformer transformer;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testParseDecisionsSuccess() {
        DmnModelInstance dmnModelInstance = mock(DmnModelInstance.class);
        DmnDecision decision1 = mock(DmnDecision.class);
        DmnDecision decision2 = mock(DmnDecision.class);
        List<DmnDecision> expectedDecisions = Arrays.asList(decision1, decision2);

        when(transformer.createTransform().modelInstance(dmnModelInstance).transformDecisions()).thenReturn(expectedDecisions);

        List<DmnDecision> actualDecisions = dmnEngine.parseDecisions(dmnModelInstance);

        assertEquals(expectedDecisions, actualDecisions);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseDecisionsFailure() {
        dmnEngine.parseDecisions(null);
    }
}
