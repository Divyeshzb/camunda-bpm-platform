// Test regenerated by AI Assistant

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.ArrayList;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.impl.spi.transform.DmnTransformer;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.Before;
import org.junit.Test;

public class DefaultDmnEngine_parseDecisions_bd368c489b_Test {

    private DmnTransformer transformer;
    private DmnModelInstance dmnModelInstance;

    @Before
    public void setup() {
        transformer = mock(DmnTransformer.class);
        dmnModelInstance = mock(DmnModelInstance.class);
    }

    @Test
    public void testParseDecisionsSuccess() {
        List<DmnDecision> expectedDecisions = new ArrayList<>();
        expectedDecisions.add(mock(DmnDecision.class));

        when(transformer.createTransform().modelInstance(dmnModelInstance).transformDecisions()).thenReturn(expectedDecisions);

        List<DmnDecision> actualDecisions = transformer.createTransform().modelInstance(dmnModelInstance).transformDecisions();
        
        assertNotNull(actualDecisions);
        assertEquals(expectedDecisions.size(), actualDecisions.size());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseDecisionsFailure() {
        when(transformer.createTransform().modelInstance(null).transformDecisions()).thenThrow(IllegalArgumentException.class);
        transformer.createTransform().modelInstance(null).transformDecisions();
    }
}
