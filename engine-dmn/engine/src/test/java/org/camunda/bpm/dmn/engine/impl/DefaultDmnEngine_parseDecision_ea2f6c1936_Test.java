// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.InputStream;
import java.util.Arrays;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.junit.Before;
import org.junit.Test;

public class DefaultDmnEngine_parseDecision_ea2f6c1936_Test {

    private DefaultDmnEngine defaultDmnEngine;
    private DmnDecision decision1;
    private DmnDecision decision2;

    @Before
    public void setUp() {
        defaultDmnEngine = new DefaultDmnEngine();
        decision1 = mock(DmnDecision.class);
        decision2 = mock(DmnDecision.class);
        when(decision1.getKey()).thenReturn("decision1");
        when(decision2.getKey()).thenReturn("decision2");
    }

    @Test
    public void testParseDecision() {
        InputStream inputStream = mock(InputStream.class);
        when(defaultDmnEngine.parseDecisions(inputStream)).thenReturn(Arrays.asList(decision1, decision2));

        DmnDecision result = defaultDmnEngine.parseDecision("decision1", inputStream);
        assertEquals(decision1, result);
    }

    @Test
    public void testParseDecisionNotFound() {
        InputStream inputStream = mock(InputStream.class);
        when(defaultDmnEngine.parseDecisions(inputStream)).thenReturn(Arrays.asList(decision1, decision2));

        Exception exception = assertThrows(RuntimeException.class, () -> {
            defaultDmnEngine.parseDecision("decision3", inputStream);
        });

        String expectedMessage = "Unable to find decision with key decision3";
        String actualMessage = exception.getMessage();

        assertEquals(expectedMessage, actualMessage);
    }
}
