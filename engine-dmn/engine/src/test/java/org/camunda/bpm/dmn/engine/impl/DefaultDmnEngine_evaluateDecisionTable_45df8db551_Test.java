// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import static org.mockito.Mockito.*;

import java.util.Arrays;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionTableResult;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecisionTable_45df8db551_Test {

  @InjectMocks
  private DefaultDmnEngine defaultDmnEngine;

  @Mock
  private DmnModelInstance dmnModelInstance;

  @Mock
  private VariableContext variableContext;

  @Mock
  private DmnDecision decision;

  @Mock
  private DmnDecisionTableResult decisionTableResult;

  @Before
  public void setup() {
    MockitoAnnotations.initMocks(this);
  }

  @Test
  public void testEvaluateDecisionTable_Success() {
    String decisionKey = "decisionKey1";
    when(decision.getKey()).thenReturn(decisionKey);
    when(defaultDmnEngine.parseDecisions(dmnModelInstance)).thenReturn(Arrays.asList(decision));
    when(defaultDmnEngine.evaluateDecisionTable(decision, variableContext)).thenReturn(decisionTableResult);

    DmnDecisionTableResult result = defaultDmnEngine.evaluateDecisionTable(decisionKey, dmnModelInstance, variableContext);

    assertEquals(decisionTableResult, result);
  }

  @Test
  public void testEvaluateDecisionTable_DecisionKeyNotFound() {
    String decisionKey = "decisionKey1";
    when(decision.getKey()).thenReturn("decisionKey2");
    when(defaultDmnEngine.parseDecisions(dmnModelInstance)).thenReturn(Arrays.asList(decision));

    Exception exception = assertThrows(DecisionKeyNotFoundException.class, () -> {
      defaultDmnEngine.evaluateDecisionTable(decisionKey, dmnModelInstance, variableContext);
    });

    String expectedMessage = "Unable to find decision with key: " + decisionKey;
    String actualMessage = exception.getMessage();

    assertEquals(expectedMessage, actualMessage);
  }
}
