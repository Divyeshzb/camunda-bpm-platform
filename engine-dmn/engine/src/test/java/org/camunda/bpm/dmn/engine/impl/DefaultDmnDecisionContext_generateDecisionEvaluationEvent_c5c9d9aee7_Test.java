// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

public class DefaultDmnDecisionContext_generateDecisionEvaluationEvent_c5c9d9aee7_Test {

    @Mock
    private DmnDecisionLogicEvaluationEvent mockEvent1;

    @Mock
    private DmnDecisionLogicEvaluationEvent mockEvent2;

    @Mock
    private DmnDecisionEvaluationListener mockListener;

    private List<DmnDecisionLogicEvaluationEvent> evaluatedEvents;
    private List<DmnDecisionEvaluationListener> evaluationListeners;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);

        evaluatedEvents = new ArrayList<>();
        evaluatedEvents.add(mockEvent1);
        evaluatedEvents.add(mockEvent2);

        evaluationListeners = new ArrayList<>();
        evaluationListeners.add(mockListener);
    }

    @Test
    public void testGenerateDecisionEvaluationEvent() {
        when(mockEvent1.getExecutedDecisionElements()).thenReturn(2L);
        when(mockEvent2.getExecutedDecisionElements()).thenReturn(3L);

        DefaultDmnDecisionContext context = new DefaultDmnDecisionContext();
        context.setEvaluationListeners(evaluationListeners);
        context.generateDecisionEvaluationEvent(evaluatedEvents);

        verify(mockEvent1, times(1)).getExecutedDecisionElements();
        verify(mockEvent2, times(1)).getExecutedDecisionElements();
        verify(mockListener, times(1)).notify(any(DmnDecisionEvaluationEventImpl.class));
    }

    @Test
    public void testGenerateDecisionEvaluationEventWithEmptyList() {
        evaluatedEvents.clear();

        DefaultDmnDecisionContext context = new DefaultDmnDecisionContext();
        context.setEvaluationListeners(evaluationListeners);
        context.generateDecisionEvaluationEvent(evaluatedEvents);

        verify(mockListener, never()).notify(any(DmnDecisionEvaluationEventImpl.class));
    }
}
