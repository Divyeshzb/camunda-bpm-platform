// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.mockito.Mockito.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionTableResult;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecisionTable_ac45eee6f5_Test {

    @InjectMocks
    DefaultDmnEngine defaultDmnEngine;

    @Mock
    InputStream inputStream;

    @Mock
    VariableContext variableContext;

    @Mock
    DmnDecision dmnDecision;

    @Mock
    DmnDecisionTableResult dmnDecisionTableResult;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testEvaluateDecisionTableSuccess() {
        String decisionKey = "testKey";
        List<DmnDecision> decisions = new ArrayList<>();
        decisions.add(dmnDecision);

        when(dmnDecision.getKey()).thenReturn(decisionKey);
        when(defaultDmnEngine.parseDecisions(inputStream)).thenReturn(decisions);
        when(defaultDmnEngine.evaluateDecisionTable(dmnDecision, variableContext)).thenReturn(dmnDecisionTableResult);

        DmnDecisionTableResult result = defaultDmnEngine.evaluateDecisionTable(decisionKey, inputStream, variableContext);

        assertEquals(dmnDecisionTableResult, result);
    }

    @Test
    public void testEvaluateDecisionTableFailure() {
        String decisionKey = "testKey";
        List<DmnDecision> decisions = new ArrayList<>();
        decisions.add(dmnDecision);

        when(dmnDecision.getKey()).thenReturn("wrongKey");
        when(defaultDmnEngine.parseDecisions(inputStream)).thenReturn(decisions);

        Exception exception = assertThrows(DmnEngineException.class, () -> {
            defaultDmnEngine.evaluateDecisionTable(decisionKey, inputStream, variableContext);
        });

        String expectedMessage = "Unable to find decision with key " + decisionKey;
        String actualMessage = exception.getMessage();

        assertEquals(expectedMessage, actualMessage);
    }
}
