// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Arrays;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionTableResult;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecisionTable_ac45eee6f5_Test {

  private DefaultDmnEngine defaultDmnEngine;
  
  @Mock
  private DmnDecision mockDecision;
  
  @Mock
  private VariableContext mockVariableContext;
  
  @Mock
  private DmnDecisionTableResult mockDecisionTableResult;

  @Before
  public void setUp() {
    MockitoAnnotations.initMocks(this);
    defaultDmnEngine = new DefaultDmnEngine();
    when(mockDecision.getKey()).thenReturn("testKey");
  }

  @Test
  public void testEvaluateDecisionTable_WithValidDecisionKey() {
    InputStream inputStream = new ByteArrayInputStream(Arrays.asList(mockDecision).toString().getBytes());
    when(defaultDmnEngine.evaluateDecisionTable(mockDecision, mockVariableContext)).thenReturn(mockDecisionTableResult);
    DmnDecisionTableResult result = defaultDmnEngine.evaluateDecisionTable("testKey", inputStream, mockVariableContext);
    assertEquals(mockDecisionTableResult, result);
  }

  @Test
  public void testEvaluateDecisionTable_WithInvalidDecisionKey() {
    InputStream inputStream = new ByteArrayInputStream(Arrays.asList(mockDecision).toString().getBytes());
    try {
      defaultDmnEngine.evaluateDecisionTable("invalidKey", inputStream, mockVariableContext);
      fail("Expected an Exception to be thrown");
    } catch (Exception e) {
      assertEquals("Unable to find decision with key: invalidKey", e.getMessage());
    }
  }
}
