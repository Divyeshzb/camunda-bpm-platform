// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.any;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Arrays;

import org.camunda.bpm.dmn.engine.DmnDecision;
import org.camunda.bpm.dmn.engine.DmnDecisionTableResult;
import org.camunda.bpm.engine.variable.Variables;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecisionTable_ac45eee6f5_Test {

  @InjectMocks
  DefaultDmnEngine defaultDmnEngine;

  @Mock
  DmnDecision decision;

  @Before
  public void setUp() {
    MockitoAnnotations.initMocks(this);
  }

  @Test
  public void testEvaluateDecisionTable_Success() {
    String decisionKey = "decision1";
    InputStream inputStream = new ByteArrayInputStream("test data".getBytes());
    VariableContext variableContext = Variables.createVariables().putValue("var1", "value1");

    when(defaultDmnEngine.parseDecisions(any(InputStream.class))).thenReturn(Arrays.asList(decision));
    when(decision.getKey()).thenReturn(decisionKey);
    DmnDecisionTableResult result = mock(DmnDecisionTableResult.class);
    when(defaultDmnEngine.evaluateDecisionTable(any(DmnDecision.class), any(VariableContext.class))).thenReturn(result);

    DmnDecisionTableResult actualResult = defaultDmnEngine.evaluateDecisionTable(decisionKey, inputStream, variableContext);

    assertEquals(result, actualResult);
  }

  @Test
  public void testEvaluateDecisionTable_Failure() {
    String decisionKey = "decision1";
    InputStream inputStream = new ByteArrayInputStream("test data".getBytes());
    VariableContext variableContext = Variables.createVariables().putValue("var1", "value1");

    when(defaultDmnEngine.parseDecisions(any(InputStream.class))).thenReturn(Arrays.asList(decision));
    when(decision.getKey()).thenReturn("wrongKey");

    assertThrows(RuntimeException.class, () -> defaultDmnEngine.evaluateDecisionTable(decisionKey, inputStream, variableContext));
  }
}
