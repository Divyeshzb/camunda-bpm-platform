// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;

import org.camunda.bpm.dmn.engine.DmnDecisionTableResult;
import org.camunda.bpm.engine.variable.Variables;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class DefaultDmnEngine_evaluateDecisionTable_c3eff7a55d_Test {

    private DefaultDmnEngine defaultDmnEngine;
    private DmnModelInstance dmnModelInstance;
    private DmnDecisionTableResult dmnDecisionTableResult;

    @BeforeEach
    public void setup() {
        defaultDmnEngine = new DefaultDmnEngine();
        dmnModelInstance = mock(DmnModelInstance.class);
        dmnDecisionTableResult = mock(DmnDecisionTableResult.class);
    }

    @Test
    public void testEvaluateDecisionTableWithValidVariables() {
        Map<String, Object> variables = new HashMap<>();
        variables.put("key", "value");

        when(defaultDmnEngine.evaluateDecisionTable("decisionKey", dmnModelInstance, Variables.fromMap(variables).asVariableContext()))
            .thenReturn(dmnDecisionTableResult);

        DmnDecisionTableResult result = defaultDmnEngine.evaluateDecisionTable("decisionKey", dmnModelInstance, variables);

        assertEquals(dmnDecisionTableResult, result);
    }

    @Test
    public void testEvaluateDecisionTableWithNullVariables() {
        Map<String, Object> variables = null;

        assertThrows(IllegalArgumentException.class, () -> {
            defaultDmnEngine.evaluateDecisionTable("decisionKey", dmnModelInstance, variables);
        });
    }
}
