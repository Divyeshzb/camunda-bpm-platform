// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;

import org.camunda.bpm.dmn.engine.DmnDecisionTableResult;
import org.camunda.bpm.engine.variable.Variables;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class DefaultDmnEngine_evaluateDecisionTable_c3eff7a55d_Test {

    @InjectMocks
    private DefaultDmnEngine defaultDmnEngine = new DefaultDmnEngine();

    @Mock
    private DmnModelInstance dmnModelInstance;

    private Map<String, Object> variables;

    @Before
    public void setUp() {
        variables = new HashMap<>();
    }

    @Test
    public void testEvaluateDecisionTable_Success() {
        String decisionKey = "testDecisionKey";
        DmnDecisionTableResult expectedResult = mock(DmnDecisionTableResult.class);

        when(defaultDmnEngine.evaluateDecisionTable(decisionKey, dmnModelInstance, Variables.fromMap(variables).asVariableContext()))
                .thenReturn(expectedResult);

        DmnDecisionTableResult actualResult = defaultDmnEngine.evaluateDecisionTable(decisionKey, dmnModelInstance, variables);

        assertEquals(expectedResult, actualResult);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testEvaluateDecisionTable_NullVariables() {
        String decisionKey = "testDecisionKey";
        defaultDmnEngine.evaluateDecisionTable(decisionKey, dmnModelInstance, null);
    }
}
