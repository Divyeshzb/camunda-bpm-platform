// Test generated by RoostGPT for test Camunda-engine-dmn using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.dmn.engine.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;

import org.camunda.bpm.dmn.engine.DmnDecisionTableResult;
import org.camunda.bpm.engine.variable.context.VariableContext;
import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DefaultDmnEngine_evaluateDecisionTable_c3eff7a55d_Test {

    @Mock
    private DmnModelInstance dmnModelInstance;

    @Mock
    private DmnDecisionTableResult dmnDecisionTableResult;

    @InjectMocks
    private DefaultDmnEngine defaultDmnEngine;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testEvaluateDecisionTable_Success() {
        String decisionKey = "testKey";
        Map<String, Object> variables = new HashMap<>();
        variables.put("testVariable", "testValue");

        when(defaultDmnEngine.evaluateDecisionTable(decisionKey, dmnModelInstance, Variables.fromMap(variables).asVariableContext())).thenReturn(dmnDecisionTableResult);

        DmnDecisionTableResult result = defaultDmnEngine.evaluateDecisionTable(decisionKey, dmnModelInstance, variables);

        assertEquals(dmnDecisionTableResult, result);
    }

    @Test
    public void testEvaluateDecisionTable_NullVariables() {
        String decisionKey = "testKey";

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            defaultDmnEngine.evaluateDecisionTable(decisionKey, dmnModelInstance, null);
        });

        String expectedMessage = "variables";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}
