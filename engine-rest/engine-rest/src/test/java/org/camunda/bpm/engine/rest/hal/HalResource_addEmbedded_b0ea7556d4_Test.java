// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.hal;

import org.camunda.bpm.engine.ProcessEngine;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.test.context.SpringBootTest;

import java.net.URI;
import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
@SpringBootTest
public class HalResource_addEmbedded_b0ea7556d4_Test {

    @Mock
    private ProcessEngine processEngine;

    @InjectMocks
    private HalResource halResource;

    private List<HalResource<?>> embeddedCollection;

    @Before
    public void setup() {
        HalResource<?> halResource1 = new HalResource<>(URI.create("http://example.com/1"));
        HalResource<?> halResource2 = new HalResource<>(URI.create("http://example.com/2"));
        embeddedCollection = Arrays.asList(halResource1, halResource2);
    }

    @Test
    public void testAddEmbedded_Successful() {
        halResource.addEmbedded("testName", embeddedCollection);
        verify(processEngine, times(2)).mergeLinks(any(HalResource.class));
        verify(processEngine, times(1)).addEmbeddedObject(eq("testName"), eq(embeddedCollection));
    }

    @Test(expected = NullPointerException.class)
    public void testAddEmbedded_NullCollection() {
        halResource.addEmbedded("testName", null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAddEmbedded_EmptyName() {
        halResource.addEmbedded("", embeddedCollection);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAddEmbedded_NullName() {
        halResource.addEmbedded(null, embeddedCollection);
    }
}
