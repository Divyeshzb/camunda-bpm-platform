// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.filter;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import java.io.IOException;

import static org.mockito.Mockito.*;

public class AbstractEmptyBodyFilter_doFilter_5f0ac04764_Test {

    private AbstractEmptyBodyFilter abstractEmptyBodyFilter;

    @Mock
    private FilterChain filterChain;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        abstractEmptyBodyFilter = new AbstractEmptyBodyFilter();
    }

    @Test
    public void testDoFilter_ContentTypeJsonAndBodyEmpty() throws IOException, ServletException {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setContentType("application/json");
        request.setContent("".getBytes());

        MockHttpServletResponse response = new MockHttpServletResponse();

        abstractEmptyBodyFilter.doFilter(request, response, filterChain);

        verify(filterChain, times(1)).doFilter(any(), eq(response));
    }

    @Test
    public void testDoFilter_ContentTypeJsonAndBodyNotEmpty() throws IOException, ServletException {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setContentType("application/json");
        request.setContent("{\"key\":\"value\"}".getBytes());

        MockHttpServletResponse response = new MockHttpServletResponse();

        abstractEmptyBodyFilter.doFilter(request, response, filterChain);

        verify(filterChain, times(1)).doFilter(any(), eq(response));
    }

    @Test
    public void testDoFilter_ContentTypeNotJson() throws IOException, ServletException {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setContentType("text/plain");
        request.setContent("This is a plain text".getBytes());

        MockHttpServletResponse response = new MockHttpServletResponse();

        abstractEmptyBodyFilter.doFilter(request, response, filterChain);

        verify(filterChain, times(1)).doFilter(eq(request), eq(response));
    }
}
