// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.exception;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.camunda.bpm.engine.AuthorizationException;
import org.camunda.bpm.engine.BadUserRequestException;
import org.camunda.bpm.engine.ParseException;
import org.camunda.bpm.engine.ProcessEngineException;
import org.camunda.bpm.engine.migration.MigratingProcessInstanceValidationException;
import org.camunda.bpm.engine.migration.MigrationPlanValidationException;
import org.camunda.bpm.engine.rest.dto.AuthorizationExceptionDto;
import org.camunda.bpm.engine.rest.dto.ExceptionDto;
import org.camunda.bpm.engine.rest.dto.ParseExceptionDto;
import org.camunda.bpm.engine.rest.dto.migration.MigratingProcessInstanceValidationExceptionDto;
import org.camunda.bpm.engine.rest.dto.migration.MigrationPlanValidationExceptionDto;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@SpringBootTest
public class ExceptionHandlerHelper_getResponse_2f866f9ff3_Test {

    @Mock
    private ExceptionHandlerHelper exceptionHandlerHelper;

    @Test
    public void testGetResponseWithParseException() {
        ParseException parseException = new ParseException("Parse Exception");
        when(exceptionHandlerHelper.getResponse(parseException)).thenReturn(
                Response.status(Response.Status.BAD_REQUEST)
                        .entity(new ParseExceptionDto(parseException))
                        .type(MediaType.APPLICATION_JSON_TYPE)
                        .build());

        Response response = exceptionHandlerHelper.getResponse(parseException);
        assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
    }

    @Test
    public void testGetResponseWithAuthorizationException() {
        AuthorizationException authorizationException = new AuthorizationException("Authorization Exception");
        when(exceptionHandlerHelper.getResponse(authorizationException)).thenReturn(
                Response.status(Response.Status.FORBIDDEN)
                        .entity(new AuthorizationExceptionDto(authorizationException))
                        .type(MediaType.APPLICATION_JSON_TYPE)
                        .build());

        Response response = exceptionHandlerHelper.getResponse(authorizationException);
        assertEquals(Response.Status.FORBIDDEN.getStatusCode(), response.getStatus());
    }
}
