// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.exception;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.ext.ExceptionMapper;
import com.fasterxml.jackson.databind.JsonMappingException;

public class JsonMappingExceptionHandler_toResponse_1230127f49_Test {

    @Mock
    private ExceptionHandlerHelper exceptionHandlerHelper;
  
    private JsonMappingExceptionHandler jsonMappingExceptionHandler;
  
    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        jsonMappingExceptionHandler = new JsonMappingExceptionHandler();
        jsonMappingExceptionHandler.setExceptionHandlerHelper(exceptionHandlerHelper);
    }
  
    @Test
    public void testToResponse_WithValidException() {
        JsonMappingException exception = new JsonMappingException("Test Exception");
        InvalidRequestException badRequestException = new InvalidRequestException(Status.BAD_REQUEST, exception, "");
        Response expectedResponse = Response.status(Status.BAD_REQUEST).entity(badRequestException).build();
        when(exceptionHandlerHelper.getResponse(badRequestException)).thenReturn(expectedResponse);
        Response actualResponse = jsonMappingExceptionHandler.toResponse(exception);
        assertEquals(expectedResponse, actualResponse);
    }
  
    @Test
    public void testToResponse_WithNullException() {
        JsonMappingException exception = null;
        InvalidRequestException badRequestException = new InvalidRequestException(Status.BAD_REQUEST, exception, "");
        Response expectedResponse = Response.status(Status.BAD_REQUEST).entity(badRequestException).build();
        when(exceptionHandlerHelper.getResponse(badRequestException)).thenReturn(expectedResponse);
        Response actualResponse = jsonMappingExceptionHandler.toResponse(exception);
        assertEquals(expectedResponse, actualResponse);
    }
}
