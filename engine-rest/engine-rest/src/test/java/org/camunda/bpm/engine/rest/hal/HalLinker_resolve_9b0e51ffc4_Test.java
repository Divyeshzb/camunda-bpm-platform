// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.hal;

import org.camunda.bpm.engine.ProcessEngine;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import java.util.*;

public class HalLinker_resolve_9b0e51ffc4_Test {

    @Mock
    private HalLinkResolver halLinkResolver;

    @Mock
    private ProcessEngine processEngine;

    private HalLinker halLinker;
    private HalRelation halRelation;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        halLinker = new HalLinker();
        halRelation = new HalRelation("testResourceType");
        halLinker.setHalLinkResolver(halRelation.resourceType, halLinkResolver);
    }

    @Test
    public void testResolveWithValidRelationAndNotEmptyLinkedIds() {
        Set<String> linkedIds = new HashSet<>(Arrays.asList("id1", "id2"));
        List<HalResource<?>> expected = new ArrayList<>();
        when(halLinkResolver.resolveLinks(any(String[].class), eq(processEngine))).thenReturn(expected);

        List<HalResource<?>> actual = halLinker.resolve(halRelation, processEngine);

        assertEquals(expected, actual);
        verify(halLinkResolver).resolveLinks(any(String[].class), eq(processEngine));
    }

    @Test
    public void testResolveWithValidRelationAndEmptyLinkedIds() {
        List<HalResource<?>> expected = Collections.emptyList();

        List<HalResource<?>> actual = halLinker.resolve(halRelation, processEngine);

        assertEquals(expected, actual);
    }

    @Test
    public void testResolveWithInvalidRelation() {
        HalRelation invalidRelation = new HalRelation("invalidResourceType");

        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            halLinker.resolve(invalidRelation, processEngine);
        });

        assertEquals("Cannot find HAL link resolver for resource type 'invalidResourceType'.", exception.getMessage());
    }
}
