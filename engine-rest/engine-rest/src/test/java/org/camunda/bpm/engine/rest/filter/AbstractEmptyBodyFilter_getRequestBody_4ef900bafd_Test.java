// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.filter;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.io.PushbackInputStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class AbstractEmptyBodyFilter_getRequestBody_4ef900bafd_Test {

    private AbstractEmptyBodyFilter abstractEmptyBodyFilter;

    @BeforeEach
    public void setUp() {
        abstractEmptyBodyFilter = new AbstractEmptyBodyFilter();
    }

    @Test
    public void testGetRequestBody_BodyIsEmpty() throws IOException {
        boolean isBodyEmpty = true;
        PushbackInputStream requestBody = Mockito.mock(PushbackInputStream.class);
        InputStream result = abstractEmptyBodyFilter.getRequestBody(isBodyEmpty, requestBody);

        assertNotNull(result, "The result should not be null");
        byte[] b = new byte["{}".getBytes(StandardCharsets.UTF_8).length];
        result.read(b);
        assertEquals(new String(b, StandardCharsets.UTF_8), "{}", "The result should match the expected value");
    }

    @Test
    public void testGetRequestBody_BodyIsNotEmpty() throws IOException {
        boolean isBodyEmpty = false;
        String input = "{\"key\":\"value\"}";
        PushbackInputStream requestBody = new PushbackInputStream(new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8)));
        InputStream result = abstractEmptyBodyFilter.getRequestBody(isBodyEmpty, requestBody);

        assertNotNull(result, "The result should not be null");
        byte[] b = new byte[input.getBytes(StandardCharsets.UTF_8).length];
        result.read(b);
        assertEquals(new String(b, StandardCharsets.UTF_8), input, "The result should match the expected value");
    }
}
