// Test generated by RoostGPT for test camunda-new using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest;

import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class CustomJacksonDateFormatListener_contextInitialized_196b428546_Test {

    private static final String CONTEXT_PARAM_NAME = "dateFormat";

    @Mock
    private ServletContextEvent sce;

    @Mock
    private ServletContext context;

    @InjectMocks
    private CustomJacksonDateFormatListener listener;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(sce.getServletContext()).thenReturn(context);
    }

    @Test
    public void contextInitialized_withDateFormat() {
        String dateFormat = "yyyy-MM-dd";
        when(context.getInitParameter(CONTEXT_PARAM_NAME)).thenReturn(dateFormat);

        listener.contextInitialized(sce);

        assertEquals(dateFormat, JacksonConfigurator.getDateFormatString());
    }

    @Test
    public void contextInitialized_withoutDateFormat() {
        when(context.getInitParameter(CONTEXT_PARAM_NAME)).thenReturn(null);

        listener.contextInitialized(sce);

        assertEquals(null, JacksonConfigurator.getDateFormatString());
    }
}
