// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.hal;

import org.camunda.bpm.engine.rest.*;
import org.camunda.bpm.engine.rest.dto.VariableValueDto;
import org.camunda.bpm.engine.rest.exception.RestException;
import org.camunda.bpm.engine.rest.sub.VariableResource;
import org.camunda.bpm.engine.runtime.VariableInstance;
import javax.ws.rs.core.UriBuilder;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
public class HalVariableValue_generateTaskVariableValue_ffb6d68df1_Test {

    @Test
    public void testGenerateTaskVariableValue_Success() {
        VariableInstance variableInstance = Mockito.mock(VariableInstance.class);
        String taskId = "testTaskId";

        HalVariableValue halVariableValue = HalVariableValue.generateTaskVariableValue(variableInstance, taskId);
        assertEquals(halVariableValue.getLinks().get("self").getHref(), UriBuilder.fromPath(TaskRestService.PATH).path(taskId).path("localVariables").build().toString());
    }

    @Test
    public void testGenerateTaskVariableValue_NullVariableInstance() {
        String taskId = "testTaskId";

        assertThrows(NullPointerException.class, () -> {
            HalVariableValue.generateTaskVariableValue(null, taskId);
        });
    }

    @Test
    public void testGenerateTaskVariableValue_NullTaskId() {
        VariableInstance variableInstance = Mockito.mock(VariableInstance.class);

        assertThrows(NullPointerException.class, () -> {
            HalVariableValue.generateTaskVariableValue(variableInstance, null);
        });
    }
}
