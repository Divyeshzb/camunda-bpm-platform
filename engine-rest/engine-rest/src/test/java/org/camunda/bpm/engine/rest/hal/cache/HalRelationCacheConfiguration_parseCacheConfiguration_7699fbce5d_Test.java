// Test generated by RoostGPT for test camunda-new using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.hal.cache;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.camunda.bpm.engine.rest.exception.HalRelationCacheConfigurationException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class HalRelationCacheConfiguration_parseCacheConfiguration_7699fbce5d_Test {

  private HalRelationCacheConfiguration halRelationCacheConfiguration;
  private ObjectMapper objectMapper;

  @BeforeEach
  public void setup() {
    objectMapper = new ObjectMapper();
    halRelationCacheConfiguration = Mockito.spy(new HalRelationCacheConfiguration());
  }

  @Test
  public void testParseCacheConfiguration_validInput() {
    String halResourceClassName = "org.camunda.bpm.engine.rest.hal.cache.HalResource";
    JsonNode jsonConfiguration = objectMapper.valueToTree(new HashMap<>());

    halRelationCacheConfiguration.parseCacheConfiguration(halResourceClassName, jsonConfiguration);

    Mockito.verify(halRelationCacheConfiguration, Mockito.times(1)).addCacheConfiguration(Mockito.any(), Mockito.any());
  }

  @Test
  public void testParseCacheConfiguration_invalidInput() {
    String halResourceClassName = "org.camunda.bpm.engine.rest.hal.cache.InvalidClass";
    JsonNode jsonConfiguration = objectMapper.valueToTree(new HashMap<>());

    Assertions.assertThrows(HalRelationCacheConfigurationException.class, () -> {
      halRelationCacheConfiguration.parseCacheConfiguration(halResourceClassName, jsonConfiguration);
    });
  }

  @Test
  public void testParseCacheConfiguration_nullInput() {
    String halResourceClassName = null;
    JsonNode jsonConfiguration = null;

    Assertions.assertThrows(HalRelationCacheConfigurationException.class, () -> {
      halRelationCacheConfiguration.parseCacheConfiguration(halResourceClassName, jsonConfiguration);
    });
  }

}
