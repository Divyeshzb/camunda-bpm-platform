// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.hal;

import org.camunda.bpm.engine.rest.CaseExecutionRestService;
import org.camunda.bpm.engine.rest.dto.VariableValueDto;
import org.camunda.bpm.engine.rest.exception.RestException;
import org.camunda.bpm.engine.rest.sub.VariableResource;
import org.camunda.bpm.engine.runtime.VariableInstance;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import static org.mockito.Mockito.when;
import static org.junit.Assert.assertEquals;
import javax.ws.rs.core.UriBuilder;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class HalVariableValue_generateCaseExecutionVariableValue_c6c519a525_Test {

    @Mock
    private VariableInstance variableInstance;

    private String caseExecutionId;

    @Before
    public void setUp() {
        caseExecutionId = "test_case_execution_id";
    }

    @Test
    public void testGenerateCaseExecutionVariableValue_Success() {
        HalVariableValue expectedHalVariableValue = HalVariableValue.fromVariableInstance(variableInstance)
            .link(HalVariableValue.REL_SELF, CaseExecutionRestService.PATH, caseExecutionId, "localVariables");
        HalVariableValue actualHalVariableValue = HalVariableValue.generateCaseExecutionVariableValue(variableInstance, caseExecutionId);
        assertEquals(expectedHalVariableValue, actualHalVariableValue);
    }

    @Test(expected = RestException.class)
    public void testGenerateCaseExecutionVariableValue_Failure() {
        when(variableInstance.getId()).thenReturn(null);
        HalVariableValue.generateCaseExecutionVariableValue(variableInstance, caseExecutionId);
    }
}
