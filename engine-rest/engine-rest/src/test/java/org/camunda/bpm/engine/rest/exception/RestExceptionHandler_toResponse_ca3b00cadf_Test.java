// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.exception;

import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@Provider
public class RestExceptionHandler_toResponse_ca3b00cadf_Test {

    @InjectMocks
    private RestExceptionHandler restExceptionHandler;

    @Mock
    private ExceptionHandlerHelper exceptionHandlerHelper;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testToResponse_success() {
        RestException restException = new RestException("Test Exception");
        Response expectedResponse = Response.status(Response.Status.BAD_REQUEST).entity("Test Exception").build();

        when(exceptionHandlerHelper.getInstance().getResponse(restException)).thenReturn(expectedResponse);

        Response actualResponse = restExceptionHandler.toResponse(restException);

        assertEquals(expectedResponse, actualResponse);
    }

    @Test
    public void testToResponse_failure() {
        RestException restException = new RestException("Test Exception");
        Response expectedResponse = Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Test Exception").build();

        when(exceptionHandlerHelper.getInstance().getResponse(restException)).thenReturn(expectedResponse);

        Response actualResponse = restExceptionHandler.toResponse(restException);

        assertEquals(expectedResponse, actualResponse);
    }
}
