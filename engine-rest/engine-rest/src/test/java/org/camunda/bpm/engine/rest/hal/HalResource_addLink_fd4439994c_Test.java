// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.hal;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.net.URI;
import java.net.URISyntaxException;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(MockitoExtension.class)
@ExtendWith(SpringExtension.class)
@SpringBootTest
public class HalResource_addLink_fd4439994c_Test {

    @InjectMocks
    private HalResource halResource;

    @BeforeEach
    public void setUp() {
        halResource = new HalResource();
    }

    @Test
    public void testAddLink() throws URISyntaxException {
        String rel = "self";
        URI hrefUri = new URI("http://localhost:8080/api/resource");

        halResource.addLink(rel, hrefUri);

        assertTrue(halResource.getLinks().containsKey(rel));
        assertTrue(halResource.getLinks().get(rel).contains(hrefUri.toString()));
    }

    @Test
    public void testAddLinkWithNullRel() throws URISyntaxException {
        URI hrefUri = new URI("http://localhost:8080/api/resource");

        assertThrows(IllegalArgumentException.class, () -> halResource.addLink(null, hrefUri));
    }

    @Test
    public void testAddLinkWithNullHrefUri() {
        String rel = "self";

        assertThrows(IllegalArgumentException.class, () -> halResource.addLink(rel, null));
    }
}
