// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.hal;

import org.camunda.bpm.engine.ProcessEngine;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class HalLinker_getLinkedResourceIdsByRelation_522af908f4_Test {

    @Mock
    private HalLinker halLinker;

    private HalRelation relation1;
    private HalRelation relation2;

    @Before
    public void setUp() {
        relation1 = new HalRelation("relation1");
        relation2 = new HalRelation("relation2");
        
        Set<String> linkedResources = new HashSet<>();
        linkedResources.add("resource1");
        linkedResources.add("resource2");

        when(halLinker.getLinkedResourceIdsByRelation(relation1)).thenReturn(linkedResources);
        when(halLinker.getLinkedResourceIdsByRelation(relation2)).thenReturn(Collections.emptySet());
    }

    @Test
    public void testGetLinkedResourceIdsByRelation_WithLinkedResources() {
        Set<String> linkedResourceIds = halLinker.getLinkedResourceIdsByRelation(relation1);

        assertEquals(2, linkedResourceIds.size());
        assertEquals(true, linkedResourceIds.contains("resource1"));
        assertEquals(true, linkedResourceIds.contains("resource2"));
    }

    @Test
    public void testGetLinkedResourceIdsByRelation_WithoutLinkedResources() {
        Set<String> linkedResourceIds = halLinker.getLinkedResourceIdsByRelation(relation2);

        assertEquals(0, linkedResourceIds.size());
    }
}
