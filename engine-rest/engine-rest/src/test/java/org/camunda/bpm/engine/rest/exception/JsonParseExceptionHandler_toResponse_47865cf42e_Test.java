// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.exception;

import com.fasterxml.jackson.core.JsonParseException;
import org.camunda.bpm.engine.rest.dto.ExceptionDto;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class JsonParseExceptionHandler_toResponse_47865cf42e_Test {

    private JsonParseExceptionHandler handler;
    private ExceptionHandlerHelper helper;
    
    @BeforeEach
    public void setUp() {
        handler = new JsonParseExceptionHandler();
        helper = Mockito.mock(ExceptionHandlerHelper.class);
        handler.setExceptionHandlerHelper(helper);
    }

    @Test
    public void testToResponse_withValidException() {
        JsonParseException exception = new JsonParseException("Test exception", JsonLocation.NA);
        InvalidRequestException badRequestException = new InvalidRequestException(Status.BAD_REQUEST, exception, "");
        
        when(helper.getResponse(badRequestException)).thenReturn(Response.status(Status.BAD_REQUEST).entity(new ExceptionDto(badRequestException)).type(MediaType.APPLICATION_JSON_TYPE).build());

        Response response = handler.toResponse(exception);
        assertEquals(Status.BAD_REQUEST.getStatusCode(), response.getStatus());
        assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getMediaType());
    }

    @Test
    public void testToResponse_withNull() {
        when(helper.getResponse(null)).thenReturn(Response.status(Status.BAD_REQUEST).entity(new ExceptionDto(null)).type(MediaType.APPLICATION_JSON_TYPE).build());

        Response response = handler.toResponse(null);
        assertEquals(Status.BAD_REQUEST.getStatusCode(), response.getStatus());
        assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getMediaType());
    }
}
