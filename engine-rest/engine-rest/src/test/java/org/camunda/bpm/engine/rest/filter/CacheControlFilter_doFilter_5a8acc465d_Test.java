// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.filter;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.*;

public class CacheControlFilter_doFilter_5a8acc465d_Test {

    @Test
    public void testDoFilterWithGetMethodAndNonXmlURI() throws IOException, ServletException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        FilterChain chain = mock(FilterChain.class);

        when(request.getMethod()).thenReturn("GET");
        when(request.getRequestURI()).thenReturn("/test");

        CacheControlFilter filter = new CacheControlFilter();
        filter.doFilter(request, response, chain);

        verify(response).setHeader("Cache-Control", "no-cache");
        verify(chain).doFilter(request, response);
    }

    @Test
    public void testDoFilterWithGetMethodAndXmlURI() throws IOException, ServletException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        FilterChain chain = mock(FilterChain.class);

        when(request.getMethod()).thenReturn("GET");
        when(request.getRequestURI()).thenReturn("/test.xml");

        CacheControlFilter filter = new CacheControlFilter();
        filter.doFilter(request, response, chain);

        verify(response, never()).setHeader("Cache-Control", "no-cache");
        verify(chain).doFilter(request, response);
    }

    @Test
    public void testDoFilterWithNonGetMethodAndNonXmlURI() throws IOException, ServletException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        FilterChain chain = mock(FilterChain.class);

        when(request.getMethod()).thenReturn("POST");
        when(request.getRequestURI()).thenReturn("/test");

        CacheControlFilter filter = new CacheControlFilter();
        filter.doFilter(request, response, chain);

        verify(response, never()).setHeader("Cache-Control", "no-cache");
        verify(chain).doFilter(request, response);
    }
}
