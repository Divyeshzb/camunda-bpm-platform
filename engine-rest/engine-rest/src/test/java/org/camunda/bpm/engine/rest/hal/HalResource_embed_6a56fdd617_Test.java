// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.hal;

import org.camunda.bpm.engine.ProcessEngine;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class HalResource_embed_6a56fdd617_Test {

    @InjectMocks
    HalResource halResource;

    @Mock
    Linker linker;

    @Mock
    ProcessEngine processEngine;

    @Mock
    HalRelation relation;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testEmbedWithResolvedLinks() {
        HalResource<?> halResource1 = mock(HalResource.class);
        HalResource<?> halResource2 = mock(HalResource.class);
        List<HalResource<?>> resolvedLinks = Arrays.asList(halResource1, halResource2);

        when(linker.resolve(relation, processEngine)).thenReturn(resolvedLinks);
        when(relation.getRelName()).thenReturn("relationName");

        HalResource result = halResource.embed(relation, processEngine);

        assertEquals(halResource, result);
        verify(halResource).addEmbedded("relationName", resolvedLinks);
    }

    @Test
    public void testEmbedWithNoResolvedLinks() {
        when(linker.resolve(relation, processEngine)).thenReturn(null);

        HalResource result = halResource.embed(relation, processEngine);

        assertEquals(halResource, result);
        verify(halResource, never()).addEmbedded(anyString(), anyList());
    }
}
