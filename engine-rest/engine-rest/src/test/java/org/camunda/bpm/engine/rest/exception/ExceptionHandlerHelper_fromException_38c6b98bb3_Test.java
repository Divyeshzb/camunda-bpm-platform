// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.exception;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.camunda.bpm.engine.AuthorizationException;
import org.camunda.bpm.engine.BadUserRequestException;
import org.camunda.bpm.engine.ParseException;
import org.camunda.bpm.engine.ProcessEngineException;
import org.camunda.bpm.engine.migration.MigratingProcessInstanceValidationException;
import org.camunda.bpm.engine.migration.MigrationPlanValidationException;
import org.camunda.bpm.engine.rest.dto.AuthorizationExceptionDto;
import org.camunda.bpm.engine.rest.dto.ExceptionDto;
import org.camunda.bpm.engine.rest.dto.ParseExceptionDto;
import org.camunda.bpm.engine.rest.dto.migration.MigratingProcessInstanceValidationExceptionDto;
import org.camunda.bpm.engine.rest.dto.migration.MigrationPlanValidationExceptionDto;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class ExceptionHandlerHelper_fromException_38c6b98bb3_Test {

    private ExceptionHandlerHelper exceptionHandlerHelper = new ExceptionHandlerHelper();

    @Test
    public void testFromException_MigratingProcessInstanceValidationException() {
        MigratingProcessInstanceValidationException exception = new MigratingProcessInstanceValidationException("Test Exception");
        ExceptionDto result = exceptionHandlerHelper.fromException(exception);
        Assert.assertTrue(result instanceof MigratingProcessInstanceValidationExceptionDto);
    }

    @Test
    public void testFromException_MigrationPlanValidationException() {
        MigrationPlanValidationException exception = new MigrationPlanValidationException("Test Exception");
        ExceptionDto result = exceptionHandlerHelper.fromException(exception);
        Assert.assertTrue(result instanceof MigrationPlanValidationExceptionDto);
    }

    @Test
    public void testFromException_AuthorizationException() {
        AuthorizationException exception = new AuthorizationException("Test Exception");
        ExceptionDto result = exceptionHandlerHelper.fromException(exception);
        Assert.assertTrue(result instanceof AuthorizationExceptionDto);
    }

    @Test
    public void testFromException_ParseException() {
        ParseException exception = new ParseException("Test Exception");
        ExceptionDto result = exceptionHandlerHelper.fromException(exception);
        Assert.assertTrue(result instanceof ParseExceptionDto);
    }

    @Test
    public void testFromException_OtherException() {
        Exception exception = new Exception("Test Exception");
        ExceptionDto result = exceptionHandlerHelper.fromException(exception);
        Assert.assertTrue(result instanceof ExceptionDto);
    }
}
