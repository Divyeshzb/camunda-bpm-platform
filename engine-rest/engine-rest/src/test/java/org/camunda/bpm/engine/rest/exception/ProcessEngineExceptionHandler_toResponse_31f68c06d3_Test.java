// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.exception;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.camunda.bpm.engine.ProcessEngineException;

import javax.ws.rs.core.Response;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class ProcessEngineExceptionHandler_toResponse_31f68c06d3_Test {
  
  @InjectMocks
  private ProcessEngineExceptionHandler processEngineExceptionHandler;
  
  @Mock
  private ExceptionHandlerHelper exceptionHandlerHelper;
  
  @BeforeEach
  public void setUp() {
    MockitoAnnotations.initMocks(this);
  }
  
  @Test
  public void testToResponse_Success() {
    ProcessEngineException exception = new ProcessEngineException("Successful Test");
    Response expectedResponse = Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Successful Test").build();
    
    when(exceptionHandlerHelper.getInstance().getResponse(exception)).thenReturn(expectedResponse);
    
    Response actualResponse = processEngineExceptionHandler.toResponse(exception);
    
    assertEquals(expectedResponse.getStatus(), actualResponse.getStatus());
    assertEquals(expectedResponse.getEntity(), actualResponse.getEntity());
  }
  
  @Test
  public void testToResponse_Failure() {
    ProcessEngineException exception = new ProcessEngineException("Failure Test");
    Response expectedResponse = Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Failure Test").build();
    
    when(exceptionHandlerHelper.getInstance().getResponse(exception)).thenReturn(expectedResponse);
    
    Response actualResponse = processEngineExceptionHandler.toResponse(exception);
    
    assertEquals(expectedResponse.getStatus(), actualResponse.getStatus());
    assertEquals(expectedResponse.getEntity(), actualResponse.getEntity());
  }
}
