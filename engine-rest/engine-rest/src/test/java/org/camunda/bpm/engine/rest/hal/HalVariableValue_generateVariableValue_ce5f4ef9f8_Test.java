// Test generated by RoostGPT for test camuda-engine-test using AI Type Open AI and AI Model gpt-4

package org.camunda.bpm.engine.rest.hal;

import org.camunda.bpm.engine.rest.*;
import org.camunda.bpm.engine.rest.dto.VariableValueDto;
import org.camunda.bpm.engine.rest.exception.RestException;
import org.camunda.bpm.engine.rest.sub.VariableResource;
import org.camunda.bpm.engine.runtime.VariableInstance;
import javax.ws.rs.core.UriBuilder;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.mockito.Mockito;
import static org.mockito.Mockito.when;

public class HalVariableValue_generateVariableValue_ce5f4ef9f8_Test {

    private VariableInstance variableInstance;
    private String variableScopeId;

    @BeforeEach
    public void setup() {
        variableInstance = Mockito.mock(VariableInstance.class);
    }

    @Test
    public void testGenerateVariableValue_TaskId() {
        variableScopeId = "task123";
        when(variableInstance.getTaskId()).thenReturn(variableScopeId);
        HalVariableValue result = HalVariableValue.generateVariableValue(variableInstance, variableScopeId);
        Assertions.assertNotNull(result);
    }

    @Test
    public void testGenerateVariableValue_ProcessInstanceId() {
        variableScopeId = "process123";
        when(variableInstance.getProcessInstanceId()).thenReturn(variableScopeId);
        HalVariableValue result = HalVariableValue.generateVariableValue(variableInstance, variableScopeId);
        Assertions.assertNotNull(result);
    }

    @Test
    public void testGenerateVariableValue_ExecutionId() {
        variableScopeId = "execution123";
        when(variableInstance.getExecutionId()).thenReturn(variableScopeId);
        HalVariableValue result = HalVariableValue.generateVariableValue(variableInstance, variableScopeId);
        Assertions.assertNotNull(result);
    }

    @Test
    public void testGenerateVariableValue_CaseInstanceId() {
        variableScopeId = "caseInstance123";
        when(variableInstance.getCaseInstanceId()).thenReturn(variableScopeId);
        HalVariableValue result = HalVariableValue.generateVariableValue(variableInstance, variableScopeId);
        Assertions.assertNotNull(result);
    }

    @Test
    public void testGenerateVariableValue_CaseExecutionId() {
        variableScopeId = "caseExecution123";
        when(variableInstance.getCaseExecutionId()).thenReturn(variableScopeId);
        HalVariableValue result = HalVariableValue.generateVariableValue(variableInstance, variableScopeId);
        Assertions.assertNotNull(result);
    }

    @Test
    public void testGenerateVariableValue_InvalidScopeId() {
        variableScopeId = "invalid123";
        Assertions.assertThrows(RestException.class, () -> {
            HalVariableValue.generateVariableValue(variableInstance, variableScopeId);
        });
    }
}
